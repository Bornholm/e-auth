#!/usr/bin/env node
/* eslint-disable no-console */
'use strict';

const fs = require('fs');
const path = require('path');
const cJSON = require('comment-json');
const createKeyStore = require('oidc-provider').createKeyStore;
const certificatesKeystore = createKeyStore();
const integrityKeystore = createKeyStore();

Promise.all([
  (function() {
    console.log('Generating certificates keystore. Please wait...');
    return generateKeys(certificatesKeystore);
  }()),
  (function() {
    console.log('Generating integrity keystore. Please wait...');
    return generateKeys(integrityKeystore);
  }()),
]).then(() => {

  const localConfigFile = path.resolve(__dirname + '/../.e-authrc');

  let localConfigStr;
  try {
    localConfigStr = fs.readFileSync(localConfigFile).toString();
  } catch (err) {
    if (err.code !== 'ENOENT') throw err;
    localConfigStr = '{}';
  }

  const localConfig = cJSON.parse(localConfigStr);

  const provider = localConfig.provider = localConfig.provider || {};

  provider.keystore = certificatesKeystore.toJSON(true);
  provider.integrity = integrityKeystore.toJSON(true);

  localConfigStr = cJSON.stringify(localConfig, null, 2);

  console.log(`Saving keystores to "${localConfigFile}"`);
  fs.writeFileSync(localConfigFile, localConfigStr);

  console.log('Done !');

});

function generateKeys(keystore) {
  return Promise.all([
    keystore.generate('RSA', 2048, {
      kid: 'sig-rs-0',
      use: 'sig',
    }),
    keystore.generate('RSA', 2048, {
      kid: 'enc-rs-0',
      use: 'enc',
    }),
    keystore.generate('EC', 'P-256', {
      kid: 'sig-ec2-0',
      use: 'sig',
    }),
    keystore.generate('EC', 'P-256', {
      kid: 'enc-ec2-0',
      use: 'enc',
    }),
    keystore.generate('EC', 'P-384', {
      kid: 'sig-ec3-0',
      use: 'sig',
    }),
    keystore.generate('EC', 'P-384', {
      kid: 'enc-ec3-0',
      use: 'enc',
    }),
    keystore.generate('EC', 'P-521', {
      kid: 'sig-ec5-0',
      use: 'sig',
    }),
    keystore.generate('EC', 'P-521', {
      kid: 'enc-ec5-0',
      use: 'enc',
    }),
  ]).then(() => keystore);
}
